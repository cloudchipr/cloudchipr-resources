## @section General Configuration

## @param nameOverride Overrides the default name where the chart will be installed (Optional).
nameOverride: ""
## @param namespaceOverride Overrides the default namespace where the chart will be installed (Optional).
namespaceOverride: ""
## @param replicas Number of replicas for the deployment.
replicas: 1
## @param image.registry Registry to use for the image.
## @param image.repository Image repository to use for the image.
## @param image.tag Image tag to use for the image. Default is `latest`.
## @param image.pullPolicy Image pull policy to use for the image. Default is `Always`.
image:
  registry: quay.io
  repository: cloudchipr/c8r-agent
  tag: "v2.8.0"
  pullPolicy: Always
## @param serviceAccount.name service account name to create
## @param serviceAccount.labels service account labels
## @param serviceAccount.annotations service account annotations
serviceAccount:
  name: c8r-agent
  labels: {}
  annotations: {}
## @param config.c8r_api_key Token to authenticate with Cloudchipr API. Required if `existingSecret` is not provided.
## @param config.c8r_cluster_id Cluster ID to identify the cluster in Cloudchipr. Required if `existingSecret` is not provided.
## @param config.c8r_cluster_name Cluster name to identify the cluster in Cloudchipr. Required if `existingSecret` is not provided.
## @param config.c8r_cloud_account Cloud account name, e.g. AWS account id, GCP project id, Azure subscriptoin name. Required if `existingSecret` is not provided.
## @param config.existingSecret Existing secret to use for the API key, it must have all keys from `config`
config:
  # -- generate from https://app.cloudchipr.com/settings/api-keys
  c8r_api_key: ""
  # -- generate with `uuidgen` command
  c8r_cluster_id: ""
  # -- user friendly name for the cluster to see in Cloudchipr UI
  c8r_cluster_name: ""
  # -- cloud account name, e.g. AWS account id, GCP project id, Azure subscriptoin name
  c8r_cloud_account: ""
  # -- all the keys must be in uppercase, like C8R_API_KEY, C8R_CLUSTER_ID, C8R_CLOUD_ACCOUNT, C8R_CLUSTER_NAME
  existingSecret: ""
## @param labels Extra labels for the deployment.
labels: {}
## @param annotations Annotations for the deployment.
annotations: {}
## @param podLabels Extra labels for the pod.
podLabels: {}
## @param podAnnotations Annotations for the pod.
podAnnotations: {}
## @param nodeSelector Node Selector labels for pod assignment.
nodeSelector: {}
## @param affinity Affinity settings for pod assignment.
affinity: {}
## @param tolerations Tolerations for pod assignment (Optional).
tolerations: []
## @param resources.requests.cpu CPU request for the container.
## @param resources.requests.memory Memory request for the container.
## @param resources.requests.ephemeral-storage Ephemeral storage request for the container.
resources:
  requests:
    cpu: 100m
    memory: 128Mi
    ephemeral-storage: "128Mi"
    # limits:
    #   cpu: 500m
    #   memory: 512Mi
    #   ephemeral-storage: "128Mi"
## @param securityContext.allowPrivilegeEscalation Allow privilege escalation for the container.
## @param securityContext.readOnlyRootFilesystem Read only root filesystem for the container.
## @param securityContext.runAsNonRoot Run as non root user for the container.
## @param securityContext.runAsUser Run as 10001 user for the container.
## @param securityContext.capabilities.drop Drop all capabilities for the container.
securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 10001
  capabilities:
    drop:
      - ALL
## @param podSecurityContext Security context for the pod.
podSecurityContext: {}
## @param addEnvFrom Add envFrom to the container.
addEnvFrom: []
# - secretRef:
#     name: my-secret
# - configMapRef:
#     name: my-configmap

## @param addEnv Add env to the container.
addEnv: []
# - name: KEY
#   value: VALUE
